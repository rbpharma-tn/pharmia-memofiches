'use client'

import { useState, useRef } from 'react'
import {
  Brain,
  FileText,
  Loader2,
  CheckCircle,
  AlertCircle,
  Sparkles,
  Send,
  Eye,
  Edit,
  Save,
  Trash2,
  Upload,
  Link,
  Play,
  Volume2,
  Copy,
  RefreshCw,
  Download
} from 'lucide-react'

interface GenerationRequest {
  topic: string
  knowledgeBase: string
  targetLevel: string
  theme: string
  therapeutic_area: string
  language: string
}

interface GeneratedMemofiche {
  id: string
  title: string
  subtitle: string
  description: string
  content: any
  level: string
  theme: string
  youtube_url?: string
  audio_files?: File[]
  kahoot_url?: string
  variants?: GeneratedMemofiche[]
}

const themes = [
  { id: 'maladies-courantes', label: 'Maladies courantes' },
  { id: 'ordonnances', label: 'Ordonnances' },
  { id: 'micronutrition', label: 'Micronutrition' },
  { id: 'dermo-cosmetique', label: 'Dermo-cosm√©tique' },
  { id: 'pharmacie-veterinaire', label: 'Pharmacie v√©t√©rinaire' },
  { id: 'dispositifs', label: 'Dispositifs' },
  { id: 'pharmacologie', label: 'Pharmacologie' },
  { id: 'communication', label: 'Communication' }
]

const levels = [
  { id: 'D√©butant', label: 'D√©butant' },
  { id: 'Interm√©diaire', label: 'Interm√©diaire' },
  { id: 'Avanc√©', label: 'Avanc√©' }
]

const therapeuticAreas = [
  'Gyn√©cologie', 'Urologie', 'Dermatologie', 'Gastro-ent√©rologie', 
  'Cardiologie', 'Pneumologie', 'Endocrinologie', 'Neurologie',
  'P√©diatrie', 'G√©riatrie', 'Infectiologie', 'H√©matologie',
  'Rhumatologie', 'Ophtalmologie', 'ORL', 'Parasitologie v√©t√©rinaire'
]

export default function MemoFicheGenerator() {
  const [step, setStep] = useState<'input' | 'generating' | 'preview' | 'edit'>('input')
  const [formData, setFormData] = useState<GenerationRequest>({
    topic: '',
    knowledgeBase: '',
    targetLevel: 'D√©butant',
    theme: 'maladies-courantes',
    therapeutic_area: 'Gyn√©cologie',
    language: 'Fran√ßais'
  })

  const [generatedMemofiche, setGeneratedMemofiche] = useState<GeneratedMemofiche | null>(null)
  const [editedMemofiche, setEditedMemofiche] = useState<GeneratedMemofiche | null>(null)
  const [isGenerating, setIsGenerating] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [generationLog, setGenerationLog] = useState<string[]>([])
  const [isGeneratingVariants, setIsGeneratingVariants] = useState(false)

  const fileInputRef = useRef<HTMLInputElement>(null)
  const audioInputRef = useRef<HTMLInputElement>(null)

  const addToLog = (message: string) => {
    setGenerationLog(prev => [...prev, `${new Date().toLocaleTimeString()}: ${message}`])
  }

  const generateMemofiche = async () => {
    if (!formData.topic.trim()) {
      setError('Veuillez saisir un sujet pour la m√©mofiche')
      return
    }

    if (!formData.knowledgeBase.trim()) {
      setError('Veuillez fournir une base de connaissances')
      return
    }

    setStep('generating')
    setIsGenerating(true)
    setError(null)
    setGenerationLog([])

    try {
      addToLog('üöÄ Initialisation de la g√©n√©ration...')
      await new Promise(resolve => setTimeout(resolve, 800))

      addToLog('üìö Analyse de la base de connaissances...')
      await new Promise(resolve => setTimeout(resolve, 1200))

      addToLog('ü§ñ G√©n√©ration du contenu avec OpenAI GPT-4...')
      await new Promise(resolve => setTimeout(resolve, 2500))

      addToLog('üìù Structuration p√©dagogique...')
      await new Promise(resolve => setTimeout(resolve, 1000))

      addToLog('üéØ Adaptation au niveau d\'apprentissage...')
      await new Promise(resolve => setTimeout(resolve, 800))

      addToLog('‚úÖ M√©mofiche g√©n√©r√©e avec succ√®s !')

      // Simulation de la r√©ponse g√©n√©r√©e
      const mockGenerated: GeneratedMemofiche = {
        id: Date.now().toString(),
        title: formData.topic,
        subtitle: formData.therapeutic_area,
        description: `Formation ${formData.targetLevel.toLowerCase()} sur ${formData.topic.toLowerCase()} - Bas√©e sur votre documentation personnalis√©e`,
        level: formData.targetLevel,
        theme: formData.theme,
        content: {
          memo: [
            {
              id: 'section1',
              type: 'section',
              title: 'Cas comptoir',
              content: `**Situation clinique :**\n\nUn patient se pr√©sente au comptoir avec des sympt√¥mes li√©s √† ${formData.topic.toLowerCase()}.\n\n**Approche recommand√©e :**\n- √âcoute active du patient\n- Questions cibl√©es pour le diagnostic\n- Conseil adapt√© au niveau ${formData.targetLevel.toLowerCase()}\n\n*Contenu bas√© sur votre base de connaissances fournie.*`
            },
            {
              id: 'section2',
              type: 'section',
              title: 'Questions √† poser',
              content: `**Questions essentielles :**\n\n1. Depuis quand ces sympt√¥mes sont-ils apparus ?\n2. Y a-t-il des facteurs d√©clenchants ?\n3. Avez-vous d√©j√† eu ce type de probl√®me ?\n4. Prenez-vous des m√©dicaments actuellement ?\n\n**Questions sp√©cifiques √† ${formData.topic} :**\n- [Questions g√©n√©r√©es selon votre documentation]\n- [Adapt√©es au niveau ${formData.targetLevel}]`
            },
            {
              id: 'section3',
              type: 'section',
              title: 'Informations sur la pathologie',
              content: `**D√©finition :**\n${formData.topic} - Pathologie relevant de ${formData.therapeutic_area.toLowerCase()}\n\n**Physiopathologie :**\n[Contenu g√©n√©r√© √† partir de votre base de connaissances]\n\n**√âpid√©miologie :**\n[Donn√©es adapt√©es au niveau ${formData.targetLevel}]\n\n**Facteurs de risque :**\n- [Liste g√©n√©r√©e selon documentation fournie]`
            },
            {
              id: 'section4',
              type: 'section',
              title: 'Crit√®res d\'orientation',
              content: `**Orientation vers le m√©decin n√©cessaire si :**\n\nüö® **Signes d'alarme :**\n- [Signes g√©n√©r√©s selon votre documentation]\n- [Adapt√©s au niveau de formation ${formData.targetLevel}]\n\n‚ö†Ô∏è **Situations particuli√®res :**\n- Femme enceinte ou allaitante\n- Enfant de moins de 15 ans\n- √âchec d'un traitement pr√©c√©dent\n\n‚úÖ **Conseil officinal possible :**\n- [Crit√®res bas√©s sur votre base de connaissances]`
            }
          ],
          flashcards: [
            {
              id: 'card1',
              question: `Quels sont les sympt√¥mes principaux de ${formData.topic.toLowerCase()} ?`,
              answer: 'R√©ponse g√©n√©r√©e √† partir de votre base de connaissances et adapt√©e au niveau ' + formData.targetLevel
            },
            {
              id: 'card2',
              question: `Quand orienter vers le m√©decin pour ${formData.topic.toLowerCase()} ?`,
              answer: 'Crit√®res d\'orientation bas√©s sur votre documentation personnalis√©e'
            }
          ],
          quiz: [
            {
              id: 'q1',
              question: `Quelle est la prise en charge de premi√®re intention pour ${formData.topic.toLowerCase()} ?`,
              options: ['Option A (g√©n√©r√©e)', 'Option B (g√©n√©r√©e)', 'Option C (g√©n√©r√©e)', 'Option D (g√©n√©r√©e)'],
              correct_answer: 1,
              explanation: 'Explication bas√©e sur votre base de connaissances et adapt√©e au niveau ' + formData.targetLevel
            }
          ],
          glossary: [
            {
              id: 'term1',
              term: 'Terme sp√©cialis√©',
              definition: 'D√©finition extraite de votre documentation et simplifi√©e pour le niveau ' + formData.targetLevel
            }
          ]
        }
      }

      setGeneratedMemofiche(mockGenerated)
      setEditedMemofiche(mockGenerated)
      setStep('preview')

    } catch (err) {
      addToLog('‚ùå Erreur lors de la g√©n√©ration')
      setError('Erreur lors de la g√©n√©ration de la m√©mofiche. Veuillez r√©essayer.')
      setStep('input')
    } finally {
      setIsGenerating(false)
    }
  }

  const generateVariants = async () => {
    if (!generatedMemofiche) return

    setIsGeneratingVariants(true)
    addToLog('üîÑ G√©n√©ration des variantes par niveau...')

    try {
      await new Promise(resolve => setTimeout(resolve, 2000))

      const variants = ['D√©butant', 'Interm√©diaire', 'Avanc√©']
        .filter(level => level !== formData.targetLevel)
        .map(level => ({
          ...generatedMemofiche,
          id: Date.now().toString() + level,
          level,
          description: `Formation ${level.toLowerCase()} sur ${formData.topic.toLowerCase()} - Variante adapt√©e`,
          content: {
            ...generatedMemofiche.content,
            memo: generatedMemofiche.content.memo.map((section: any) => ({
              ...section,
              content: section.content.replace(formData.targetLevel, level)
            }))
          }
        }))

      setGeneratedMemofiche(prev => prev ? { ...prev, variants } : null)
      addToLog('‚úÖ Variantes g√©n√©r√©es avec succ√®s !')

    } catch (err) {
      addToLog('‚ùå Erreur lors de la g√©n√©ration des variantes')
    } finally {
      setIsGeneratingVariants(false)
    }
  }

  const saveMemofiche = async () => {
    if (!editedMemofiche) return

    addToLog('üíæ Sauvegarde de la m√©mofiche...')
    // Ici on ferait l'appel pour sauvegarder la m√©mofiche
    await new Promise(resolve => setTimeout(resolve, 1000))
    addToLog('‚úÖ M√©mofiche sauvegard√©e avec succ√®s !')

    // Retour √† l'√©tat initial
    setStep('input')
    setGeneratedMemofiche(null)
    setEditedMemofiche(null)
    setFormData({
      topic: '',
      knowledgeBase: '',
      targetLevel: 'D√©butant',
      theme: 'maladies-courantes',
      therapeutic_area: 'Gyn√©cologie',
      language: 'Fran√ßais'
    })
  }

  const handleAudioUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(event.target.files || [])
    if (editedMemofiche) {
      setEditedMemofiche(prev => prev ? { ...prev, audio_files: files } : null)
    }
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center space-x-3">
        <div className="h-10 w-10 bg-blue-100 rounded-lg flex items-center justify-center">
          <Brain className="h-6 w-6 text-blue-600" />
        </div>
        <div>
          <h2 className="text-2xl font-bold text-gray-900">G√©n√©rateur de M√©mofiches IA</h2>
          <p className="text-gray-600">Cr√©ation automatis√©e de contenu √©ducatif avec intelligence artificielle</p>
        </div>
      </div>

      <div className="grid lg:grid-cols-2 gap-8">
        {/* Formulaire de g√©n√©ration */}
        <div className="bg-white rounded-lg border border-gray-200 p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center space-x-2">
            <Sparkles className="h-5 w-5 text-yellow-500" />
            <span>Param√®tres de G√©n√©ration</span>
          </h3>

          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Sujet de la m√©mofiche *
              </label>
              <input
                type="text"
                value={formData.topic}
                onChange={(e) => setFormData(prev => ({ ...prev, topic: e.target.value }))}
                placeholder="Ex: Candidose vulvo-vaginale, Cystite aigu√´..."
                className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>

            <div className="grid md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Th√®me
                </label>
                <select
                  value={formData.theme}
                  onChange={(e) => setFormData(prev => ({ ...prev, theme: e.target.value }))}
                  className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  {themes.map(theme => (
                    <option key={theme.id} value={theme.id}>{theme.label}</option>
                  ))}
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Niveau
                </label>
                <select
                  value={formData.level}
                  onChange={(e) => setFormData(prev => ({ ...prev, level: e.target.value }))}
                  className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  {levels.map(level => (
                    <option key={level.id} value={level.id}>{level.label}</option>
                  ))}
                </select>
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Sph√®re th√©rapeutique
              </label>
              <select
                value={formData.therapeutic_area}
                onChange={(e) => setFormData(prev => ({ ...prev, therapeutic_area: e.target.value }))}
                className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                {therapeuticAreas.map(area => (
                  <option key={area} value={area}>{area}</option>
                ))}
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Contexte additionnel (optionnel)
              </label>
              <textarea
                value={formData.additional_context}
                onChange={(e) => setFormData(prev => ({ ...prev, additional_context: e.target.value }))}
                placeholder="Informations sp√©cifiques, cas particuliers, focus souhait√©..."
                rows={3}
                className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>

            {error && (
              <div className="flex items-center space-x-2 text-red-600 bg-red-50 p-3 rounded-lg">
                <AlertCircle className="h-4 w-4" />
                <span className="text-sm">{error}</span>
              </div>
            )}

            <button
              onClick={generateMemofiche}
              disabled={isGenerating}
              className="w-full bg-gray-900 text-white py-3 px-4 rounded-lg hover:bg-gray-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center space-x-2 transition-colors"
            >
              {isGenerating ? (
                <>
                  <Loader2 className="h-4 w-4 animate-spin" />
                  <span>G√©n√©ration en cours...</span>
                </>
              ) : (
                <>
                  <Send className="h-4 w-4" />
                  <span>G√©n√©rer la M√©mofiche</span>
                </>
              )}
            </button>
          </div>
        </div>

        {/* Log de g√©n√©ration et r√©sultat */}
        <div className="space-y-6">
          {/* Log en temps r√©el */}
          {(isGenerating || generationLog.length > 0) && (
            <div className="bg-gray-900 rounded-lg p-4 text-green-400 font-mono text-sm">
              <h4 className="text-white font-semibold mb-2">Log de g√©n√©ration</h4>
              <div className="space-y-1 max-h-40 overflow-y-auto">
                {generationLog.map((log, index) => (
                  <div key={index}>{log}</div>
                ))}
                {isGenerating && (
                  <div className="flex items-center space-x-2">
                    <Loader2 className="h-3 w-3 animate-spin" />
                    <span>En cours...</span>
                  </div>
                )}
              </div>
            </div>
          )}

          {/* R√©sultat g√©n√©r√© */}
          {generatedMemofiche && (
            <div className="bg-white rounded-lg border border-gray-200 p-6">
              <div className="flex items-center justify-between mb-4">
                <h4 className="text-lg font-semibold text-gray-900 flex items-center space-x-2">
                  <CheckCircle className="h-5 w-5 text-green-500" />
                  <span>M√©mofiche G√©n√©r√©e</span>
                </h4>
                <span className="px-2 py-1 text-xs bg-green-100 text-green-800 rounded-full">
                  {generatedMemofiche.level}
                </span>
              </div>

              <div className="space-y-3">
                <div>
                  <h5 className="font-medium text-gray-900">{generatedMemofiche.title}</h5>
                  <p className="text-sm text-gray-600">{generatedMemofiche.subtitle}</p>
                </div>
                
                <p className="text-sm text-gray-700">{generatedMemofiche.description}</p>
                
                <div className="flex items-center space-x-2 text-xs text-gray-500">
                  <span>Sections: {generatedMemofiche.content.memo.length}</span>
                  <span>‚Ä¢</span>
                  <span>Flashcards: {generatedMemofiche.content.flashcards.length}</span>
                  <span>‚Ä¢</span>
                  <span>Quiz: {generatedMemofiche.content.quiz.length}</span>
                </div>

                <div className="flex space-x-3 pt-3">
                  <button
                    onClick={publishMemofiche}
                    className="flex-1 bg-green-600 text-white py-2 px-4 rounded-lg hover:bg-green-700 flex items-center justify-center space-x-2"
                  >
                    <FileText className="h-4 w-4" />
                    <span>Publier</span>
                  </button>
                  <button className="flex-1 border border-gray-300 text-gray-700 py-2 px-4 rounded-lg hover:bg-gray-50 flex items-center justify-center space-x-2">
                    <Eye className="h-4 w-4" />
                    <span>Pr√©visualiser</span>
                  </button>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  )
}
