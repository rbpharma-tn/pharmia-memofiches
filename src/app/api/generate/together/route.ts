import { NextRequest, NextResponse } from 'next/server'

// Fonction pour r√©parer un JSON malform√©
function repairJSON(jsonText: string): string {
  console.log('üîß Attempting to repair JSON...')

  // Supprimer les caract√®res de contr√¥le
  let repaired = jsonText.replace(/[\u0000-\u001F\u007F-\u009F]/g, '')

  // R√©parer les virgules manquantes avant les accolades fermantes
  repaired = repaired.replace(/([^,\s])\s*}/g, '$1}')

  // R√©parer les virgules manquantes avant les crochets fermants
  repaired = repaired.replace(/([^,\s])\s*]/g, '$1]')

  // Supprimer les virgules en trop avant les accolades fermantes
  repaired = repaired.replace(/,\s*}/g, '}')

  // Supprimer les virgules en trop avant les crochets fermants
  repaired = repaired.replace(/,\s*]/g, ']')

  // R√©parer les guillemets manquants pour les cl√©s
  repaired = repaired.replace(/([{,]\s*)([a-zA-Z_][a-zA-Z0-9_]*)\s*:/g, '$1"$2":')

  // √âchapper les guillemets dans les valeurs de cha√Æne
  repaired = repaired.replace(/"([^"]*)"([^"]*)"([^"]*)":/g, '"$1\\"$2\\"$3":')

  console.log('üîß JSON repair completed')
  return repaired
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { topic, knowledgeBase, targetLevel, theme, therapeutic_area } = body

    // Validation
    if (!topic || !knowledgeBase) {
      return NextResponse.json(
        { error: 'Topic et base de connaissances requis' },
        { status: 400 }
      )
    }

    const apiKey = process.env.TOGETHER_API_KEY

    // Mode d√©mo si pas de cl√© API
    if (!apiKey || apiKey === 'your_together_api_key') {
      console.log('Mode d√©mo Together AI - Pas de cl√© API configur√©e')
      return NextResponse.json({
        success: true,
        data: generateDemoContent(topic, knowledgeBase, targetLevel, theme, therapeutic_area),
        provider: "Together AI (Mode D√©mo)",
        demo_mode: true
      })
    }

    // Prompt syst√®me optimis√© pour Together AI
    const systemPrompt = `Tu es un expert pharmacien sp√©cialis√© dans la cr√©ation de m√©mofiches √©ducatives. Tu dois OBLIGATOIREMENT r√©pondre UNIQUEMENT avec un JSON valide, sans aucun texte explicatif avant ou apr√®s.

R√àGLES STRICTES :
- Commence directement par {
- Termine directement par }
- Aucun texte avant ou apr√®s le JSON
- JSON valide uniquement

Tes comp√©tences incluent :
- Analyse approfondie des cas cliniques pharmaceutiques
- Adaptation p√©dagogique selon le niveau (D√©butant/Interm√©diaire/Avanc√©)
- Structuration claire et logique du contenu √©ducatif
- Int√©gration de bonnes pratiques pharmaceutiques au comptoir`

    const userPrompt = `Cr√©e une m√©mofiche compl√®te et d√©taill√©e sur "${topic}" pour le niveau ${targetLevel} en ${therapeutic_area}.

MISSION CRITIQUE : PR√âSERVER INT√âGRALEMENT la structure et le contenu source.

BASE DE CONNAISSANCES SOURCE (√Ä REPRODUIRE FID√àLEMENT) :
${knowledgeBase}

R√àGLES DE PR√âSERVATION STRICTES :
1. EXTRAIRE et REPRODUIRE EXACTEMENT chaque section num√©rot√©e du document source
2. CONSERVER INT√âGRALEMENT tous les dosages, dur√©es, crit√®res, et r√©f√©rences
3. MAINTENIR la structure originale (sections 1, 2, 3, etc.)
4. ENRICHIR uniquement avec des explications compl√©mentaires SANS modifier le contenu source
5. AJOUTER des d√©tails p√©dagogiques APR√àS avoir reproduit fid√®lement le contenu original

M√âTHODE D'EXTRACTION :
- Identifier chaque section num√©rot√©e (1., 2., 3., etc.) dans la base de connaissances
- Reproduire le contenu de chaque section SANS modification
- Enrichir avec des explications compl√©mentaires en conservant l'information originale
- Structurer selon le plan original du document

STRUCTURE JSON REQUISE :
{
  "title": "${topic}",
  "subtitle": "${therapeutic_area} - Formation ${targetLevel}",
  "description": "Description claire et engageante de la m√©mofiche",
  "estimated_duration": "15-25 minutes",
  "learning_objectives": [
    "Objectif d'apprentissage sp√©cifique 1",
    "Objectif d'apprentissage sp√©cifique 2", 
    "Objectif d'apprentissage sp√©cifique 3"
  ],
  "content": {
    "memo": [
      {
        "id": "section_1",
        "title": "Section 1 - [Titre exact de la section 1 du document source]",
        "content": "REPRODUIRE EXACTEMENT le contenu de la section 1 de la base de connaissances, puis enrichir avec explications compl√©mentaires. Conserver tous les d√©tails, dosages, et r√©f√©rences originaux.",
        "icon": "user"
      },
      {
        "id": "section_2",
        "title": "Section 2 - [Titre exact de la section 2 du document source]",
        "content": "REPRODUIRE EXACTEMENT le contenu de la section 2 de la base de connaissances, puis enrichir avec explications compl√©mentaires. Conserver tous les d√©tails, dosages, et r√©f√©rences originaux.",
        "icon": "help-circle"
      },
      {
        "id": "section_3",
        "title": "Section 3 - [Titre exact de la section 3 du document source]",
        "content": "REPRODUIRE EXACTEMENT le contenu de la section 3 de la base de connaissances, puis enrichir avec explications compl√©mentaires. Conserver tous les d√©tails, dosages, et r√©f√©rences originaux.",
        "icon": "book"
      },
      {
        "id": "section_4",
        "title": "Section 4 - [Titre exact de la section 4 du document source]",
        "content": "REPRODUIRE EXACTEMENT le contenu de la section 4 de la base de connaissances, puis enrichir avec explications compl√©mentaires. Conserver tous les d√©tails, dosages, et r√©f√©rences originaux.",
        "icon": "arrow-right"
      },
      {
        "id": "section_5",
        "title": "Section 5 - [Titre exact de la section 5 du document source]",
        "content": "REPRODUIRE EXACTEMENT le contenu de la section 5 de la base de connaissances, puis enrichir avec explications compl√©mentaires. Conserver tous les d√©tails, dosages, et r√©f√©rences originaux.",
        "icon": "heart"
      },
      {
        "id": "section_6",
        "title": "Section 6 - [Titre exact de la section 6 du document source]",
        "content": "REPRODUIRE EXACTEMENT le contenu de la section 6 de la base de connaissances, puis enrichir avec explications compl√©mentaires. Conserver tous les d√©tails, dosages, et r√©f√©rences originaux.",
        "icon": "shield"
      },
      {
        "id": "section_7",
        "title": "Section 7 - [Titre exact de la section 7 du document source]",
        "content": "REPRODUIRE EXACTEMENT le contenu de la section 7 de la base de connaissances, puis enrichir avec explications compl√©mentaires. Conserver tous les d√©tails, dosages, et r√©f√©rences originaux.",
        "icon": "book-open"
      }
    ],
    "flashcards": [
      {
        "id": "card1",
        "question": "Question sur les sympt√¥mes de ${topic}",
        "answer": "R√©ponse bas√©e sur les sympt√¥mes EXACTS de la base de connaissances",
        "difficulty": "easy"
      },
      {
        "id": "card2",
        "question": "Question sur le traitement de ${topic}",
        "answer": "R√©ponse avec dosages et dur√©es PR√âCIS de la source",
        "difficulty": "medium"
      },
      {
        "id": "card3",
        "question": "Question sur les r√®gles d'hygi√®ne de vie",
        "answer": "R√©ponse avec recommandations EXACTES de la documentation",
        "difficulty": "medium"
      },
      {
        "id": "card4",
        "question": "Question sur les crit√®res d'orientation",
        "answer": "R√©ponse avec crit√®res PR√âCIS de la base de connaissances",
        "difficulty": "medium"
      },
      {
        "id": "card5",
        "question": "Question sur la surveillance",
        "answer": "R√©ponse avec modalit√©s de surveillance EXACTES",
        "difficulty": "hard"
      },
      {
        "id": "card6",
        "question": "Question sur les m√©canismes physiopathologiques",
        "answer": "R√©ponse enrichie sur la physiopathologie",
        "difficulty": "hard"
      },
      {
        "id": "card7",
        "question": "Question de synth√®se sur ${topic}",
        "answer": "R√©ponse synth√©tique int√©grant tous les aspects",
        "difficulty": "hard"
      }
    ],
    "quiz": [
      {
        "id": "q1",
        "question": "Question sur le cas comptoir de ${topic} (type al√©atoire qcm ou vrai_faux)",
        "type": "qcm ou vrai_faux (choix al√©atoire)",
        "options": ["Options bas√©es sur le cas comptoir de la section memo"],
        "correct_answer": 0,
        "explanation": "Explication bas√©e sur le cas comptoir de la base de connaissances",
        "difficulty": "easy"
      },
      {
        "id": "q2",
        "question": "Question sur les questions cl√©s √† poser pour ${topic} (type al√©atoire qcm ou vrai_faux)",
        "type": "qcm ou vrai_faux (choix al√©atoire)",
        "options": ["Options bas√©es sur les questions cl√©s de la section memo"],
        "correct_answer": 0,
        "explanation": "Explication bas√©e sur les questions cl√©s de la documentation",
        "difficulty": "easy"
      },
      {
        "id": "q3",
        "question": "Question sur les informations pathologie de ${topic} (type al√©atoire qcm ou vrai_faux)",
        "type": "qcm ou vrai_faux (choix al√©atoire)",
        "options": ["Options bas√©es sur la pathologie de la section memo"],
        "correct_answer": 0,
        "explanation": "Explication bas√©e sur la pathologie de la base de connaissances",
        "difficulty": "medium"
      },
      {
        "id": "q4",
        "question": "Question sur les crit√®res d'orientation pour ${topic} (type al√©atoire qcm ou vrai_faux)",
        "type": "qcm ou vrai_faux (choix al√©atoire)",
        "options": ["Options bas√©es sur l'orientation de la section memo"],
        "correct_answer": 0,
        "explanation": "Explication bas√©e sur les crit√®res d'orientation de la documentation",
        "difficulty": "medium"
      },
      {
        "id": "q5",
        "question": "Question sur le conseil et prise en charge de ${topic} (type al√©atoire qcm ou vrai_faux)",
        "type": "qcm ou vrai_faux (choix al√©atoire)",
        "options": ["Options bas√©es sur le conseil de la section memo"],
        "correct_answer": 0,
        "explanation": "Explication bas√©e sur le conseil et prise en charge de la base de connaissances",
        "difficulty": "medium"
      },
      {
        "id": "q6",
        "question": "Question sur les r√®gles d'hygi√®ne de vie pour ${topic} (type al√©atoire qcm ou vrai_faux)",
        "type": "qcm ou vrai_faux (choix al√©atoire)",
        "options": ["Options bas√©es sur l'hygi√®ne de vie de la section memo"],
        "correct_answer": 0,
        "explanation": "Explication bas√©e sur les r√®gles d'hygi√®ne de la documentation",
        "difficulty": "medium"
      },
      {
        "id": "q7",
        "question": "Question sur les r√©f√©rences bibliographiques de ${topic} (type al√©atoire qcm ou vrai_faux)",
        "type": "qcm ou vrai_faux (choix al√©atoire)",
        "options": ["Options bas√©es sur les r√©f√©rences de la section memo"],
        "correct_answer": 0,
        "explanation": "Explication bas√©e sur les r√©f√©rences de la documentation",
        "difficulty": "easy"
      },
      {
        "id": "q8",
        "question": "Question de synth√®se sur le traitement de ${topic} (type al√©atoire qcm ou vrai_faux)",
        "type": "qcm ou vrai_faux (choix al√©atoire)",
        "options": ["Options de synth√®se bas√©es sur toute la section memo"],
        "correct_answer": 0,
        "explanation": "Explication de synth√®se bas√©e sur toute la base de connaissances",
        "difficulty": "hard"
      },
      {
        "id": "q9",
        "question": "Question de synth√®se sur la surveillance de ${topic} (type al√©atoire qcm ou vrai_faux)",
        "type": "qcm ou vrai_faux (choix al√©atoire)",
        "options": ["Options de synth√®se bas√©es sur toute la section memo"],
        "correct_answer": 0,
        "explanation": "Explication de synth√®se bas√©e sur toute la documentation",
        "difficulty": "hard"
      },
      {
        "id": "q10",
        "question": "Question de synth√®se g√©n√©rale sur ${topic} (type al√©atoire qcm ou vrai_faux)",
        "type": "qcm ou vrai_faux (choix al√©atoire)",
        "options": ["Options de synth√®se bas√©es sur toute la section memo"],
        "correct_answer": 0,
        "explanation": "Explication de synth√®se compl√®te bas√©e sur toute la base de connaissances",
        "difficulty": "hard"
      }
    ],
    "glossary": [
      {
        "id": "term1",
        "term": "${topic}",
        "definition": "D√©finition bas√©e sur les informations de la base de connaissances",
        "category": "pathologie"
      },
      {
        "id": "term2",
        "term": "M√©dicament principal mentionn√© dans la source",
        "definition": "M√©canisme d'action et dosage EXACT de la documentation",
        "category": "medicament"
      },
      {
        "id": "term3",
        "term": "Terme technique 1 de la base de connaissances",
        "definition": "Explication adapt√©e au niveau ${targetLevel}",
        "category": "technique"
      },
      {
        "id": "term4",
        "term": "Terme technique 2 de la base de connaissances",
        "definition": "D√©finition pr√©cise bas√©e sur la documentation",
        "category": "technique"
      },
      {
        "id": "term5",
        "term": "Sympt√¥me principal de ${topic}",
        "definition": "Description du sympt√¥me selon la source",
        "category": "symptome"
      },
      {
        "id": "term6",
        "term": "Crit√®re d'orientation pour ${topic}",
        "definition": "Explication du crit√®re selon la documentation",
        "category": "procedure"
      },
      {
        "id": "term7",
        "term": "R√®gle d'hygi√®ne pour ${topic}",
        "definition": "Description de la r√®gle selon la source",
        "category": "hygiene"
      },
      {
        "id": "term8",
        "term": "Surveillance de ${topic}",
        "definition": "Modalit√©s de surveillance selon la documentation",
        "category": "surveillance"
      },
      {
        "id": "term9",
        "term": "R√©f√©rence bibliographique 1",
        "definition": "Description de la r√©f√©rence mentionn√©e",
        "category": "reference"
      },
      {
        "id": "term10",
        "term": "R√©f√©rence bibliographique 2",
        "definition": "Description de la r√©f√©rence mentionn√©e",
        "category": "reference"
      }
    ],
    "key_points": [
      "Point cl√© essentiel sur la pathologie",
      "Point cl√© sur la prise en charge",
      "Point cl√© sur l'orientation",
      "Point cl√© sur la pr√©vention"
    ],
    "practical_tips": [
      "Conseil pratique concret pour le comptoir",
      "Astuce pour l'interrogatoire patient",
      "Point d'attention important",
      "Conseil pour l'√©ducation du patient"
    ]
  }
}

CONTRAINTES STRICTES DE FID√âLIT√â :
- ANALYSER la structure num√©rot√©e du document source (1., 2., 3., etc.)
- EXTRAIRE chaque section dans l'ordre exact du document original
- REPRODUIRE INT√âGRALEMENT chaque section SANS modification du contenu factuel
- CONSERVER tous les dosages, dur√©es, crit√®res, et r√©f√©rences EXACTEMENT comme dans la source
- ENRICHIR uniquement APR√àS avoir reproduit fid√®lement le contenu original
- G√âN√âRER OBLIGATOIREMENT 7 flashcards compl√®tes (facile √† difficile)
- G√âN√âRER OBLIGATOIREMENT 10 questions de quiz compl√®tes (m√©lange QCM et Vrai/Faux)
- G√âN√âRER OBLIGATOIREMENT 10 termes de glossaire complets
- INCLURE toutes les sections : memo, flashcards, quiz, glossary, key_points, practical_tips
- R√©ponds UNIQUEMENT avec le JSON VALIDE ci-dessous, RIEN D'AUTRE

M√âTHODE D'EXTRACTION OBLIGATOIRE :
1. Lire ENTI√àREMENT la base de connaissances
2. Identifier CHAQUE section num√©rot√©e (1., 2., 3., etc.)
3. Extraire le TITRE EXACT de chaque section
4. Reproduire le CONTENU INT√âGRAL de chaque section
5. Enrichir avec des explications compl√©mentaires SANS alt√©rer l'information source

IMPORTANT CRITIQUE :
- R√©ponds UNIQUEMENT avec le JSON ci-dessous
- Commence directement par {
- Termine directement par }
- AUCUN texte explicatif, AUCUN commentaire
- JSON valide uniquement

OBJECTIF : JSON complet avec traitement source intact + sections enrichies + 7 flashcards + 10 questions quiz + 10 termes glossaire.

EXEMPLE DE D√âBUT DE R√âPONSE ATTENDUE :
{
  "title": "${topic}",
  "subtitle": "${therapeutic_area} - Formation ${targetLevel}",
  ...`

    // Appel √† l'API Together AI
    const response = await fetch('https://api.together.xyz/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo',
        messages: [
          {
            role: 'system',
            content: systemPrompt
          },
          {
            role: 'user',
            content: userPrompt
          }
        ],
        temperature: 0.7,
        max_tokens: 4000,
        top_p: 0.9,
        stream: false
      })
    })

    if (!response.ok) {
      const errorText = await response.text()
      console.error('Erreur Together AI API:', errorText)
      
      // Fallback vers le mode d√©mo
      return NextResponse.json({
        success: true,
        data: generateDemoContent(topic, knowledgeBase, targetLevel, theme, therapeutic_area),
        provider: "Together AI (Fallback D√©mo)",
        demo_mode: true,
        error_details: errorText
      })
    }

    const result = await response.json()
    
    if (!result.choices || !result.choices[0] || !result.choices[0].message) {
      throw new Error('Format de r√©ponse inattendu de Together AI')
    }

    const generatedText = result.choices[0].message.content
    console.log('ü§ñ Generated text from Together AI (first 300 chars):', generatedText.substring(0, 300) + '...')
    console.log('üìä Full response length:', generatedText.length, 'characters')

    // Tentative de parsing JSON avec r√©paration automatique
    let parsedContent
    try {
      // Nettoyer le texte g√©n√©r√©
      const cleanedText = generatedText.trim()
      const jsonMatch = cleanedText.match(/\{[\s\S]*\}/)

      if (jsonMatch) {
        console.log('‚úÖ JSON pattern found, attempting to parse...')
        let jsonText = jsonMatch[0]

        // Tentative de parsing direct
        try {
          parsedContent = JSON.parse(jsonText)
          console.log('üéâ JSON parsing successful!')
        } catch (directParseError) {
          console.log('‚ö†Ô∏è Direct parsing failed, attempting JSON repair...')

          // Tentative de r√©paration JSON
          jsonText = repairJSON(jsonText)
          parsedContent = JSON.parse(jsonText)
          console.log('üîß JSON repair successful!')
        }
      } else {
        throw new Error('Pas de JSON valide trouv√© dans la r√©ponse')
      }
    } catch (parseError) {
      console.log('‚ùå JSON parsing failed:', parseError.message)
      console.log('üîÑ Using intelligent fallback system')
      // Utilisation directe du fallback intelligent
      parsedContent = { content: generateStructuredContent(topic, knowledgeBase, targetLevel, theme, therapeutic_area, generatedText) }
    }

    // Formatage final
    const memofiche = {
      id: `together_memofiche_${Date.now()}`,
      title: parsedContent.title || topic,
      subtitle: parsedContent.subtitle || `${therapeutic_area} - Formation ${targetLevel}`,
      description: parsedContent.description || `M√©mofiche √©ducative sur ${topic.toLowerCase()} g√©n√©r√©e par Together AI Llama 3.1.`,
      level: targetLevel,
      theme: theme,
      estimated_duration: parsedContent.estimated_duration || "15-25 minutes",
      learning_objectives: parsedContent.learning_objectives || [
        `Ma√Ætriser la prise en charge de ${topic.toLowerCase()}`,
        "D√©velopper les comp√©tences de conseil au comptoir",
        "Identifier les crit√®res d'orientation m√©dicale",
        "Appliquer les protocoles pharmaceutiques"
      ],
      content: parsedContent.content || generateDefaultContent(topic, targetLevel, generatedText),
      metadata: {
        created_by: "Together AI Llama 3.1",
        source: "Base de connaissances personnalis√©e",
        version: "1.0",
        last_updated: new Date().toISOString(),
        model: "meta-llama/Llama-3-8b-chat-hf",
        tokens_used: result.usage?.total_tokens || 'N/A'
      },
      created_at: new Date().toISOString()
    }

    return NextResponse.json({
      success: true,
      data: memofiche,
      provider: "Together AI Llama 3",
      model: "meta-llama/Llama-3-8b-chat-hf",
      tokens_used: result.usage?.total_tokens,
      demo_mode: false
    })

  } catch (error) {
    console.error('Erreur g√©n√©ration Together AI:', error)

    // Fallback vers le mode d√©mo en cas d'erreur
    // Utiliser les param√®tres d√©j√† extraits au d√©but de la fonction
    return NextResponse.json({
      success: true,
      data: generateDemoContent(topic, knowledgeBase, targetLevel, theme, therapeutic_area),
      provider: "Together AI (Erreur - Mode D√©mo)",
      demo_mode: true,
      error: error instanceof Error ? error.message : 'Erreur inconnue'
    })
  }
}

// Fonction de g√©n√©ration d√©mo pour Together AI
function generateDemoContent(topic: string, knowledgeBase: string, targetLevel: string, theme: string, therapeutic_area: string) {
  return {
    id: `together_demo_${Date.now()}`,
    title: topic,
    subtitle: `${therapeutic_area} - Formation ${targetLevel}`,
    description: `M√©mofiche √©ducative sur ${topic.toLowerCase()} g√©n√©r√©e par Together AI Llama 3.1 (Mode D√©mo). Contenu bas√© sur votre documentation.`,
    level: targetLevel,
    theme: theme,
    estimated_duration: "15-25 minutes",
    learning_objectives: [
      `Comprendre les m√©canismes de ${topic.toLowerCase()}`,
      "Ma√Ætriser l'approche conseil au comptoir avec Together AI",
      "Identifier les crit√®res d'orientation appropri√©s",
      "B√©n√©ficier de l'IA collaborative Together"
    ],
    content: {
      memo: [
        {
          id: "together_intro",
          title: "Introduction - Together AI",
          content: `**G√©n√©ration par Together AI Llama 3.1**\n\nCette m√©mofiche utilise la plateforme collaborative Together AI.\n\n**Sujet trait√© :** ${topic}\n**Niveau :** ${targetLevel}\n**Documentation :** ${knowledgeBase.substring(0, 100)}...\n\n**Avantages Together AI :**\n- $25 de cr√©dit gratuit g√©n√©reux\n- Mod√®les Llama 3.1 optimis√©s\n- Plateforme collaborative\n- Excellente qualit√© √©ducative`,
          icon: "brain"
        },
        {
          id: "together_cas_comptoir",
          title: "Cas comptoir",
          content: `**Situation clinique :**\n\nUn patient se pr√©sente au comptoir concernant ${topic}.\n\n**Approche Together AI :**\n- G√©n√©ration collaborative intelligente\n- Adaptation niveau ${targetLevel} optimis√©e\n- Int√©gration parfaite de votre documentation\n- Conseil expert et personnalis√©\n\n*Contenu g√©n√©r√© par Together AI √† partir de : "${knowledgeBase.substring(0, 50)}..."*`,
          icon: "user"
        }
      ],
      flashcards: [
        {
          id: "together_card1",
          question: `Quels sont les avantages de Together AI pour ${topic} ?`,
          answer: "$25 cr√©dit gratuit, mod√®les Llama 3.1 optimis√©s, plateforme collaborative, et excellente qualit√© √©ducative.",
          difficulty: "easy"
        },
        {
          id: "together_card2",
          question: `Comment Together AI optimise-t-il la g√©n√©ration pour ${targetLevel} ?`,
          answer: "Adaptation collaborative du contenu, structuration p√©dagogique avanc√©e, et personnalisation selon l'expertise.",
          difficulty: "medium"
        }
      ],
      quiz: [
        {
          id: "together_quiz1",
          question: `Quel est l'avantage principal de Together AI pour ${topic} ?`,
          options: [
            "Plateforme collaborative avec $25 gratuit",
            "Simple copie de contenu",
            "G√©n√©ration basique",
            "Traduction automatique"
          ],
          correct_answer: 0,
          explanation: "Together AI offre une plateforme collaborative avec $25 de cr√©dit gratuit et des mod√®les optimis√©s.",
          difficulty: "medium"
        }
      ],
      glossary: [
        {
          id: "together_term1",
          term: "Together AI",
          definition: "Plateforme collaborative d'IA offrant $25 de cr√©dit gratuit et des mod√®les Llama 3.1 optimis√©s pour l'√©ducation.",
          category: "technologie"
        }
      ],
      key_points: [
        `${topic} trait√© par Together AI`,
        "$25 de cr√©dit gratuit g√©n√©reux",
        "Mod√®les Llama 3.1 collaboratifs",
        "Optimisation pour l'√©ducation pharmaceutique"
      ],
      practical_tips: [
        "Utiliser Together AI pour du contenu √©ducatif avanc√©",
        "Profiter du cr√©dit gratuit g√©n√©reux",
        "Tester la qualit√© collaborative",
        "Optimiser les prompts pour Llama 3.1"
      ]
    },
    metadata: {
      created_by: "Together AI Llama 3.1 (Mode D√©mo)",
      source: "D√©monstration API",
      version: "1.0",
      last_updated: new Date().toISOString(),
      demo_mode: true
    }
  }
}

// Fonction pour extraire les sections num√©rot√©es de la base de connaissances
function extractNumberedSections(knowledgeBase: string, topic: string) {
  console.log('üîç Extracting numbered sections from knowledge base...')
  console.log('üìÑ Knowledge base length:', knowledgeBase.length)

  const sections = []

  // Patterns am√©lior√©s pour capturer TOUTES les sections num√©rot√©es
  const patterns = [
    // Pattern principal : 1. Titre suivi du contenu jusqu'√† la prochaine section
    /(\d+)\.\s*([^\n\r]+)[\n\r]*((?:(?!\d+\.).)*)/g,
    // Pattern alternatif : num√©ro avec point et contenu
    /(\d+)\.\s*([^1-9]+?)(?=\d+\.|$)/gs,
    // Pattern pour sections avec tirets
    /(\d+)[\.\-]\s*([^0-9]+?)(?=\d+[\.\-]|$)/gs,
    // Pattern pour sections avec espaces
    /(\d+)\s*[\.\-]\s*([^\n\r]+(?:\n(?!\d+[\.\-])[^\n\r]*)*)/g
  ]

  // Essayer chaque pattern et garder le meilleur r√©sultat
  let bestSections = []

  for (const pattern of patterns) {
    pattern.lastIndex = 0 // Reset regex
    const currentSections = []
    let match

    while ((match = pattern.exec(knowledgeBase)) !== null) {
      const sectionNumber = parseInt(match[1])
      let sectionTitle = match[2] ? match[2].trim() : ''
      let sectionContent = match[3] ? match[3].trim() : match[2].trim()

      // Si pas de contenu s√©par√©, utiliser le titre comme contenu
      if (!match[3] && sectionTitle) {
        sectionContent = sectionTitle
        sectionTitle = generateSectionTitle(sectionContent, sectionNumber)
      }

      if (sectionContent.length > 10) { // Ignorer les sections trop courtes
        // √âviter les doublons
        if (!currentSections.find(s => s.number === sectionNumber)) {
          currentSections.push({
            number: sectionNumber,
            content: sectionContent,
            title: sectionTitle || generateSectionTitle(sectionContent, sectionNumber)
          })
        }
      }
    }

    // Garder le r√©sultat avec le plus de sections
    if (currentSections.length > bestSections.length) {
      bestSections = currentSections
    }
  }

  // Trier les sections par num√©ro
  bestSections.sort((a, b) => a.number - b.number)

  // Si pas de sections num√©rot√©es trouv√©es, essayer d'autres patterns
  if (bestSections.length === 0) {
    console.log('‚ö†Ô∏è No numbered sections found, trying traditional extraction')
    return extractTraditionalSections(knowledgeBase, topic)
  }

  console.log('‚úÖ Found numbered sections:', bestSections.length)
  bestSections.forEach((section, index) => {
    console.log(`üìã Section ${section.number}: ${section.title} (${section.content.length} chars)`)
  })

  return bestSections
}

// Fonction pour g√©n√©rer un titre de section bas√© sur le contenu
function generateSectionTitle(content: string, sectionNumber: number): string {
  // Essayer d'extraire un titre explicite au d√©but du contenu
  const lines = content.split('\n')
  const firstLine = lines[0].trim()

  // Si la premi√®re ligne semble √™tre un titre (courte et sans ponctuation finale)
  if (firstLine.length < 80 && !firstLine.endsWith('.') && !firstLine.endsWith(':')) {
    // Nettoyer le titre potentiel
    const cleanTitle = firstLine.replace(/^[\d\.\-\s]+/, '').trim()
    if (cleanTitle.length > 3 && cleanTitle.length < 60) {
      return cleanTitle
    }
  }

  // Fallback : analyser le contenu pour d√©terminer le type
  const firstWords = content.split(' ').slice(0, 10).join(' ').toLowerCase()

  // Patterns √©tendus pour identifier le type de section
  if (/cas|patient|situation|comptoir|pr√©sent|vient|consulte/i.test(firstWords)) {
    return "Cas comptoir"
  } else if (/question|interrogatoire|demander|poser|√©valuer/i.test(firstWords)) {
    return "Questions cl√©s √† poser"
  } else if (/pathologie|d√©finition|maladie|infection|qu'est-ce|description/i.test(firstWords)) {
    return "Informations sur la pathologie"
  } else if (/orientation|m√©decin|sp√©cialiste|r√©f√©rer|consulter|urgence/i.test(firstWords)) {
    return "Crit√®res d'orientation"
  } else if (/traitement|th√©rapie|m√©dicament|prise en charge|conseil|recommand/i.test(firstWords)) {
    return "Conseil et prise en charge"
  } else if (/hygi√®ne|alimentaire|mode de vie|pr√©vention|√©viter|recommandation/i.test(firstWords)) {
    return "R√®gles d'hygi√®ne de vie"
  } else if (/surveillance|suivi|contr√¥le|v√©rifier|surveiller/i.test(firstWords)) {
    return "Surveillance"
  } else if (/r√©f√©rence|bibliographie|source|√©tude|publication/i.test(firstWords)) {
    return "R√©f√©rences bibliographiques"
  } else {
    // Utiliser les premiers mots comme titre si aucun pattern ne correspond
    const potentialTitle = content.split(' ').slice(0, 6).join(' ')
    return potentialTitle.length > 50 ? `Section ${sectionNumber}` : potentialTitle
  }
}

// Fonction de fallback pour extraction traditionnelle
function extractTraditionalSections(knowledgeBase: string, topic: string) {
  console.log('Using traditional section extraction')

  const sections = []

  // Extraction des sections traditionnelles
  const patterns = [
    { regex: /SYMPT√îMES?\s*:\s*([^.]+(?:\.[^.]*)*)/i, title: "Sympt√¥mes" },
    { regex: /TRAITEMENT\s*:\s*([^.]+(?:\.[^.]*)*)/i, title: "Traitement" },
    { regex: /R√àGLES?\s+HYGI√âNO?-?DI√âT√âTIQUES?\s*:\s*([^.]+(?:\.[^.]*)*)/i, title: "R√®gles hygi√©no-di√©t√©tiques" },
    { regex: /SURVEILLANCE\s*:\s*([^.]+(?:\.[^.]*)*)/i, title: "Surveillance" },
    { regex: /R√âF√âRENCES?\s*:\s*([^.]+(?:\.[^.]*)*)/i, title: "R√©f√©rences" }
  ]

  patterns.forEach((pattern, index) => {
    const match = knowledgeBase.match(pattern.regex)
    if (match && match[1]) {
      sections.push({
        number: index + 1,
        title: pattern.title,
        content: match[1].trim()
      })
    }
  })

  // Si aucune section trouv√©e, cr√©er une section par d√©faut
  if (sections.length === 0) {
    sections.push({
      number: 1,
      title: "Contenu principal",
      content: knowledgeBase.trim()
    })
  }

  return sections
}

// Fonction pour extraire du contenu entre deux sections
function extractBetweenSections(text: string, startPattern: RegExp, endPattern: RegExp): string | null {
  const startMatch = text.search(startPattern)
  if (startMatch === -1) return null

  const afterStart = text.substring(startMatch)
  const colonIndex = afterStart.indexOf(':')
  if (colonIndex === -1) return null

  const content = afterStart.substring(colonIndex + 1)
  const endMatch = content.search(endPattern)

  if (endMatch === -1) {
    return content.trim().substring(0, 200) // Prendre les 200 premiers caract√®res
  }

  return content.substring(0, endMatch).trim()
}

// Fonction pour extraire du contenu depuis la fin
function extractFromEnd(text: string, pattern: RegExp): string | null {
  const match = text.search(pattern)
  if (match === -1) return null

  const afterMatch = text.substring(match)
  const colonIndex = afterMatch.indexOf(':')
  if (colonIndex === -1) return null

  return afterMatch.substring(colonIndex + 1).trim()
}

// Fonction pour structurer le contenu g√©n√©r√© avec sections compl√®tes
function generateStructuredContent(topic: string, knowledgeBase: string, targetLevel: string, theme: string, therapeutic_area: string, generatedText: string) {
  const extractedSections = extractNumberedSections(knowledgeBase, topic)

  // Conversion des sections extraites en format memo
  const memoSections = extractedSections.map((section, index) => {
    const iconMap = {
      "Cas comptoir": "user",
      "Questions cl√©s √† poser": "help-circle",
      "Informations sur la pathologie": "book",
      "Crit√®res d'orientation": "arrow-right",
      "Conseil et prise en charge": "heart",
      "R√®gles d'hygi√®ne de vie": "shield",
      "Surveillance": "eye",
      "R√©f√©rences bibliographiques": "book-open"
    }

    return {
      id: `section_${section.number}`,
      title: section.title,
      content: section.content,
      icon: iconMap[section.title] || "file-text"
    }
  })

  // Si moins de 3 sections, ajouter des sections par d√©faut
  if (memoSections.length < 3) {
    const defaultSections = [
      {
        id: "cas_comptoir",
        title: "Cas comptoir",
        content: `Patient pr√©sentant ${topic}. √âvaluation et conseil pharmaceutique selon la documentation fournie.`,
        icon: "user"
      },
      {
        id: "pathologie",
        title: "Informations sur la pathologie",
        content: `${topic} : pathologie n√©cessitant une prise en charge adapt√©e selon le niveau ${targetLevel}.`,
        icon: "book"
      },
      {
        id: "prise_en_charge",
        title: "Prise en charge",
        content: `Approche th√©rapeutique bas√©e sur la documentation fournie pour ${topic}.`,
        icon: "heart"
      }
    ]

    // Ajouter les sections par d√©faut si n√©cessaire
    defaultSections.forEach(defaultSection => {
      if (!memoSections.find(s => s.title.toLowerCase().includes(defaultSection.title.toLowerCase()))) {
        memoSections.push(defaultSection)
      }
    })
  }

  return {
    memo: memoSections,
    flashcards: generateFlashcardsFromSections(extractedSections, topic, targetLevel),
    quiz: generateQuizFromSections(extractedSections, topic, targetLevel),
    glossary: generateGlossaryFromSections(extractedSections, topic, targetLevel),
    key_points: [
      `${topic} : pathologie trait√©e`,
      `Traitement : selon documentation`,
      `Hygi√®ne : r√®gles importantes`,
      `Surveillance : modalit√©s adapt√©es`
    ],
    practical_tips: [
      "√âvaluer la gravit√© des sympt√¥mes",
      "Adapter le conseil au niveau du patient",
      "Surveiller l'efficacit√© du traitement",
      "Orienter si n√©cessaire"
    ]
  }
}

// Fonction pour g√©n√©rer les flashcards bas√©es sur les sections
function generateFlashcardsFromSections(sections: any[], topic: string, targetLevel: string) {
  const flashcards = []
  const difficulties = ['easy', 'easy', 'medium', 'medium', 'medium', 'hard', 'hard']

  sections.forEach((section, index) => {
    if (index < 7) { // Limiter √† 7 flashcards
      const shortContent = section.content.length > 100 ?
        section.content.substring(0, 100) + "..." :
        section.content

      flashcards.push({
        id: `card${index + 1}`,
        question: `${section.title} pour ${topic} ?`,
        answer: shortContent,
        difficulty: difficulties[index] || 'medium'
      })
    }
  })

  // Compl√©ter avec des flashcards g√©n√©riques si moins de 7
  while (flashcards.length < 7) {
    const index = flashcards.length
    flashcards.push({
      id: `card${index + 1}`,
      question: `Question ${index + 1} sur ${topic}`,
      answer: `R√©ponse bas√©e sur la documentation fournie pour ${topic}.`,
      difficulty: difficulties[index] || 'medium'
    })
  }

  return flashcards
}

// Fonction pour g√©n√©rer le quiz bas√© sur les sections
function generateQuizFromSections(sections: any[], topic: string, targetLevel: string) {
  const quiz = []
  const types = ['qcm', 'vrai_faux', 'qcm', 'vrai_faux', 'qcm', 'vrai_faux', 'qcm', 'vrai_faux', 'qcm', 'vrai_faux']
  const difficulties = ['easy', 'easy', 'medium', 'medium', 'medium', 'medium', 'hard', 'hard', 'hard', 'hard']

  sections.forEach((section, index) => {
    if (index < 10) { // Limiter √† 10 questions
      const questionType = types[index]
      const shortContent = section.content.length > 80 ?
        section.content.substring(0, 80) + "..." :
        section.content

      if (questionType === 'qcm') {
        quiz.push({
          id: `q${index + 1}`,
          question: `Concernant ${section.title.toLowerCase()} de ${topic}, que dit la documentation ?`,
          type: "qcm",
          options: [
            shortContent,
            "Information diff√©rente",
            "Information non mentionn√©e",
            "Information contradictoire"
          ],
          correct_answer: 0,
          explanation: `Selon la documentation : ${shortContent}`,
          difficulty: difficulties[index]
        })
      } else {
        quiz.push({
          id: `q${index + 1}`,
          question: `${section.title} est important pour ${topic}`,
          type: "vrai_faux",
          options: ["Vrai", "Faux"],
          correct_answer: 0,
          explanation: `Vrai. ${shortContent}`,
          difficulty: difficulties[index]
        })
      }
    }
  })

  // Compl√©ter avec des questions g√©n√©riques si moins de 10
  while (quiz.length < 10) {
    const index = quiz.length
    const questionType = types[index]

    if (questionType === 'qcm') {
      quiz.push({
        id: `q${index + 1}`,
        question: `Question ${index + 1} sur ${topic}`,
        type: "qcm",
        options: [
          "R√©ponse bas√©e sur la documentation",
          "R√©ponse alternative",
          "R√©ponse incorrecte",
          "Aucune r√©ponse"
        ],
        correct_answer: 0,
        explanation: `R√©ponse bas√©e sur la documentation fournie pour ${topic}.`,
        difficulty: difficulties[index]
      })
    } else {
      quiz.push({
        id: `q${index + 1}`,
        question: `Affirmation ${index + 1} sur ${topic}`,
        type: "vrai_faux",
        options: ["Vrai", "Faux"],
        correct_answer: 0,
        explanation: `Affirmation bas√©e sur la documentation fournie.`,
        difficulty: difficulties[index]
      })
    }
  }

  return quiz
}

// Fonction pour g√©n√©rer le glossaire bas√© sur les sections
function generateGlossaryFromSections(sections: any[], topic: string, targetLevel: string) {
  const glossary = []

  // Terme principal
  glossary.push({
    id: "term1",
    term: topic,
    definition: `Pathologie ou condition m√©dicale trait√©e dans cette m√©mofiche.`,
    category: "pathologie"
  })

  // Termes bas√©s sur les sections
  sections.forEach((section, index) => {
    if (index < 9 && glossary.length < 10) { // Limiter √† 10 termes
      const firstWords = section.content.split(' ').slice(0, 3).join(' ')

      glossary.push({
        id: `term${index + 2}`,
        term: firstWords.length > 20 ? section.title : firstWords,
        definition: `Concept li√© √† ${section.title.toLowerCase()} pour ${topic}.`,
        category: getCategoryFromTitle(section.title)
      })
    }
  })

  // Compl√©ter avec des termes g√©n√©riques si moins de 10
  const genericTerms = [
    { term: "Sympt√¥mes", definition: "Manifestations cliniques observ√©es", category: "symptome" },
    { term: "Traitement", definition: "Approche th√©rapeutique recommand√©e", category: "medicament" },
    { term: "Surveillance", definition: "Modalit√©s de suivi m√©dical", category: "surveillance" },
    { term: "Pr√©vention", definition: "Mesures pr√©ventives √† adopter", category: "hygiene" },
    { term: "Orientation", definition: "Crit√®res de r√©f√©rence m√©dicale", category: "procedure" },
    { term: "Posologie", definition: "Dosage et fr√©quence d'administration", category: "medicament" },
    { term: "Efficacit√©", definition: "Mesure de l'am√©lioration clinique", category: "technique" },
    { term: "Contre-indications", definition: "Situations o√π le traitement est d√©conseill√©", category: "medicament" }
  ]

  genericTerms.forEach((term, index) => {
    if (glossary.length < 10) {
      glossary.push({
        id: `generic_term${index + 1}`,
        term: term.term,
        definition: term.definition,
        category: term.category
      })
    }
  })

  return glossary.slice(0, 10) // S'assurer qu'on a exactement 10 termes max
}

// Fonction pour d√©terminer la cat√©gorie d'un terme bas√© sur le titre de section
function getCategoryFromTitle(title: string): string {
  if (/cas|comptoir|patient/i.test(title)) return "procedure"
  if (/question|interrogatoire/i.test(title)) return "technique"
  if (/pathologie|maladie|infection/i.test(title)) return "pathologie"
  if (/orientation|m√©decin/i.test(title)) return "procedure"
  if (/traitement|m√©dicament|th√©rapie/i.test(title)) return "medicament"
  if (/hygi√®ne|alimentaire|pr√©vention/i.test(title)) return "hygiene"
  if (/surveillance|suivi/i.test(title)) return "surveillance"
  if (/r√©f√©rence|bibliographie/i.test(title)) return "reference"
  return "technique"
}

// Fonction pour contenu par d√©faut
function generateDefaultContent(topic: string, targetLevel: string, generatedText: string) {
  return {
    memo: [
      {
        id: "default_content",
        title: topic,
        content: generatedText || `Contenu g√©n√©r√© par Together AI pour ${topic} au niveau ${targetLevel}.`,
        icon: "book"
      }
    ],
    flashcards: [],
    quiz: [],
    glossary: [],
    key_points: [],
    practical_tips: []
  }
}
